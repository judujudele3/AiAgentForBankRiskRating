# tools/model_suggester.py

from marshmallow import missing
from agent.registry import get_data
from utils.tool_utils import format_success, format_failure, validate_required_keys
from config.llm_config import get_llm


def suggest_models_tool(target_id: str) -> dict:
    try:
        
        target = get_data(target_id)

        if target is None:
            return format_failure(f"Target column with id '{target_id}' not found.")

        # Analyse simple pour enrichir le prompt
        n_unique = target.nunique()
        dtype = str(target.dtype)

        if dtype.startswith("float") or dtype.startswith("int"):
            if n_unique <= 10:
                task_type = "classification"
            else:
                task_type = "regression"
        else:
            task_type = "classification"

        sample_values = target.dropna().unique()[:5].tolist()
        sample_summary = f"- Type: {dtype}\n- Valeurs uniques: {n_unique}\n- Exemples: {sample_values}"

        # Préparer le prompt
        prompt = f"""
Tu es un expert en machine learning. Voici une description de la colonne cible (y) d’un dataset :

{sample_summary}

En te basant uniquement sur cette colonne cible, propose une liste de 3 à 5 modèles adaptés pour entraîner un modèle de machine learning. 
Indique pour chaque modèle :
- Le nom du modèle
- Le type de tâche (classification ou regression)
- Une justification courte

Formate ta réponse en JSON de cette forme :
{{
  "task_type": "classification",
  "suggestions": [
    {{"model": "LogisticRegression", "reason": "..." }},
    ...
  ]
}}
"""

        llm = get_llm()
        response = llm.invoke(prompt)

        # Extraction simple
        import json
        try:
            parsed = json.loads(response)
            return format_success(outputs=parsed, logs=["Model suggestions generated by LLM."])
        except Exception:
            return format_failure("LLM did not return a valid JSON format.")

    except Exception as e:
        return format_failure(str(e))
